" Common set up  "{{{1

runtime! plugin/wwwsearch.vim
call vspec#hint({'sid': string(wwwsearch#_sid_prefix())})
setlocal buftype=nofile




function s:describe__default_command_to_open_uri()  "{{{1
  It "s:default_command_to_open_uri()"

  " FIXME: How do I write a portable test?
  " Assumption: This test is run on Mac OS X.
  Should Call('s:default_command_to_open_uri') ==# 'open {uri}'
endfunction




function s:describe__normalize_search_engine_name()  "{{{1
  It "s:normalize_search_engine_name()"

  Should Call('s:normalize_search_engine_name', '') ==# ''
  Should Call('s:normalize_search_engine_name', '-') ==# ''
  Should Call('s:normalize_search_engine_name', '--') ==# '-'
  Should Call('s:normalize_search_engine_name', '->') ==# '>'
  Should Call('s:normalize_search_engine_name', '>-') ==# '>-'

  Should Call('s:normalize_search_engine_name', 'sasara') ==# 'sasara'
  Should Call('s:normalize_search_engine_name', '-sasara') ==# 'sasara'
endfunction




function s:describe__uri_escape()  "{{{1
  It "s:uri_escape()"

  let safe_chars = ('ABCDEFGHIJKLMNOPQRSTUVWXYZ'
  \                 . 'abcdefghijklmnopqrstuvwxyz'
  \                 . '0123456789'
  \                 . '_.-'
  \                 . '/')

  " BUGS: NUL cannot be tested properly because of a restriction of Vim.
  for i in range(256)
    let c = nr2char(i)
    let expected = 0 <= stridx(safe_chars, c) ? c : printf('%%%02X', i)
    execute 'Should' 'Call(''s:uri_escape'', '.string(c).')'
    \ '==#' string(expected)
  endfor
endfunction




function s:describe__uri_to_search()  "{{{1
  It "s:uri_to_search()"

  Should Call('s:uri_to_search', 'keyword', 'default')
  \ ==# 'http://www.google.com/search?q=keyword'

  Should Call('s:uri_to_search', 'keyword', 'google')
  \ ==# 'http://www.google.com/search?q=keyword'

  Should Call('s:uri_to_search', '{keyword}', 'google')
  \ ==# 'http://www.google.com/search?q=%7Bkeyword%7D'
endfunction




function s:describe__wwwsearch_add()  "{{{1
  It "wwwsearch#add()"

  Should wwwsearch#add('sasara', 'sasara {keyword} kawaii') ==# ''
  Should Call('s:uri_to_search', 'is', 'sasara') ==# 'sasara is kawaii'

  Should wwwsearch#add('sasara', 'sasara {keyword} super super mega kawaii')
  \ ==# 'sasara {keyword} kawaii'
  Should Call('s:uri_to_search', 'is', 'sasara')
  \ ==# 'sasara is super super mega kawaii'

  Should wwwsearch#remove('sasara')
  \ ==# 'sasara {keyword} super super mega kawaii'
  Should Call('s:uri_to_search', 'is', 'sasara')
  \ ==# ''
endfunction




function s:describe__wwwsearch_cmd_Wwwsearch_complete()  "{{{1
  It "wwwsearch#cmd_Wwwsearch_complete()"

  " FIXME: More proper arguments.
  " FIXME: More tests.
  Should wwwsearch#cmd_Wwwsearch_complete('', ':Wwwsearch ', 11)
  \ ==# [
  \ '-default',
  \ '-dictionary',
  \ '-google',
  \ '-twitter',
  \ '-vim.org',
  \ '-wikipedia',
  \ ]
endfunction




function s:describe__wwwsearch_cmd_Wwwsearch()  "{{{1
  " FIXME: How do I write a portable test?
  It "wwwsearch#cmd_Wwwsearch()"

  let g:wwwsearch_command_to_open_uri = ''
  Should wwwsearch#cmd_Wwwsearch(['keyword1']) ==# 0
  Wwwsearch keyword1
  Should wwwsearch#cmd_Wwwsearch(['-default', 'keyword2']) ==# 0
  Wwwsearch -default keyword2
  Should wwwsearch#cmd_Wwwsearch(['-iNvAlId', 'keyword3']) ==# 0
  Wwwsearch -iNvAlId keyword3

  let g:wwwsearch_command_to_open_uri = 'echo {uri}'
  Should wwwsearch#cmd_Wwwsearch(['keyword4']) ==# !0
  Wwwsearch keyword4
  Should wwwsearch#cmd_Wwwsearch(['-default', 'keyword5']) ==# !0
  Wwwsearch -default keyword5
  Should wwwsearch#cmd_Wwwsearch(['-iNvAlId', 'keyword6']) ==# !0
  Wwwsearch -iNvAlId keyword6
  Should wwwsearch#cmd_Wwwsearch(['{keyword7}']) ==# !0
  Wwwsearch {keyword7}
  Should wwwsearch#cmd_Wwwsearch(['-default', '{keyword8}']) ==# !0
  Wwwsearch -default {keyword8}
  Should wwwsearch#cmd_Wwwsearch(['-iNvAlId', '{keyword9}']) ==# !0
  Wwwsearch -iNvAlId {keyword9}

  let g:wwwsearch_command_to_open_uri = Call('s:default_command_to_open_uri')
endfunction




function s:describe__wwwsearch_operator_default()  "{{{1
  It "wwwsearch#operator_default()"

  put ='before {keyword} after'

  let g:wwwsearch_command_to_open_uri = ''

  normal! 0Wm[Em]
  Should [line("'["), col("'[")] ==# [line('.'), 8]
  Should [line("']"), col("']")] ==# [line('.'), 16]
  Should wwwsearch#operator_default('char') ==# 0
  execute 'normal' "0W\<Plug>(operator-wwwsearch)E"

  normal! 0Wm[Em]
  Should [line("'["), col("'[")] ==# [line('.'), 8]
  Should [line("']"), col("']")] ==# [line('.'), 16]
  Should wwwsearch#operator_default('line') ==# 0
  execute 'normal' "0W\<Plug>(operator-wwwsearch)\<Plug>(operator-wwwsearch)"

  normal! 0Wm[Em]
  Should [line("'["), col("'[")] ==# [line('.'), 8]
  Should [line("']"), col("']")] ==# [line('.'), 16]
  Should wwwsearch#operator_default('block') ==# 0
  execute 'normal' "0W\<Plug>(operator-wwwsearch)\<C-v>E"

  " FIXME: How do I write a portable test?
  let g:wwwsearch_command_to_open_uri = 'echo {uri}'

  normal! 0Wm[Em]
  Should [line("'["), col("'[")] ==# [line('.'), 8]
  Should [line("']"), col("']")] ==# [line('.'), 16]
  Should wwwsearch#operator_default('char') ==# !0
  execute 'normal' "0W\<Plug>(operator-wwwsearch)E"

  normal! 0Wm[Em]
  Should [line("'["), col("'[")] ==# [line('.'), 8]
  Should [line("']"), col("']")] ==# [line('.'), 16]
  Should wwwsearch#operator_default('line') ==# !0
  execute 'normal' "0W\<Plug>(operator-wwwsearch)\<Plug>(operator-wwwsearch)"

  normal! 0Wm[Em]
  Should [line("'["), col("'[")] ==# [line('.'), 8]
  Should [line("']"), col("']")] ==# [line('.'), 16]
  Should wwwsearch#operator_default('block') ==# !0
  execute 'normal' "0W\<Plug>(operator-wwwsearch)\<C-v>E"

  let g:wwwsearch_command_to_open_uri = Call('s:default_command_to_open_uri')
endfunction




function s:describe__wwwsearch_remove()  "{{{1
  It "wwwsearch#remove()"

  Should wwwsearch#remove('wwwsearch#remove') ==# ''
  Should wwwsearch#add('wwwsearch#remove', 'sasara {keyword} kawaii') ==# ''
  Should wwwsearch#remove('wwwsearch#remove') ==# 'sasara {keyword} kawaii'
  Should wwwsearch#remove('wwwsearch#remove') ==# ''
endfunction




function s:describe__wwwsearch_search()  "{{{1
  It "wwwsearch#search()"

  let g:wwwsearch_command_to_open_uri = ''
  Should wwwsearch#search('keyword') ==# 0
  Should wwwsearch#search('keyword', '-default') ==# 0
  Should wwwsearch#search('keyword', 'iNvAlId') ==# 0

  " FIXME: How do I write a portable test?
  let g:wwwsearch_command_to_open_uri = 'echo {uri}'
  Should wwwsearch#search('keyword') ==# !0
  Should wwwsearch#search('keyword', '-default') ==# !0
  Should wwwsearch#search('keyword', 'iNvAlId') ==# !0
  Should wwwsearch#search('{keyword}') ==# !0
  Should wwwsearch#search('{keyword}', '-default') ==# !0
  Should wwwsearch#search('{keyword}', 'iNvAlId') ==# !0

  let g:wwwsearch_command_to_open_uri = Call('s:default_command_to_open_uri')
endfunction




" __END__  "{{{1
" vim: filetype=vim foldmethod=marker
